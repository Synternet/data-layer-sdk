// Code generated by mockery v2.42.3. DO NOT EDIT.

package service

import (
	nats "github.com/nats-io/nats.go"
	mock "github.com/stretchr/testify/mock"
)

// MockJetStreamer is an autogenerated mock type for the JetStreamer type
type MockJetStreamer struct {
	mock.Mock
}

type MockJetStreamer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJetStreamer) EXPECT() *MockJetStreamer_Expecter {
	return &MockJetStreamer_Expecter{mock: &_m.Mock}
}

// JetStream provides a mock function with given fields: opts
func (_m *MockJetStreamer) JetStream(opts ...nats.JSOpt) (nats.JetStreamContext, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for JetStream")
	}

	var r0 nats.JetStreamContext
	var r1 error
	if rf, ok := ret.Get(0).(func(...nats.JSOpt) (nats.JetStreamContext, error)); ok {
		return rf(opts...)
	}
	if rf, ok := ret.Get(0).(func(...nats.JSOpt) nats.JetStreamContext); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(nats.JetStreamContext)
		}
	}

	if rf, ok := ret.Get(1).(func(...nats.JSOpt) error); ok {
		r1 = rf(opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJetStreamer_JetStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JetStream'
type MockJetStreamer_JetStream_Call struct {
	*mock.Call
}

// JetStream is a helper method to define mock.On call
//   - opts ...nats.JSOpt
func (_e *MockJetStreamer_Expecter) JetStream(opts ...interface{}) *MockJetStreamer_JetStream_Call {
	return &MockJetStreamer_JetStream_Call{Call: _e.mock.On("JetStream",
		append([]interface{}{}, opts...)...)}
}

func (_c *MockJetStreamer_JetStream_Call) Run(run func(opts ...nats.JSOpt)) *MockJetStreamer_JetStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]nats.JSOpt, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(nats.JSOpt)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockJetStreamer_JetStream_Call) Return(_a0 nats.JetStreamContext, _a1 error) *MockJetStreamer_JetStream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJetStreamer_JetStream_Call) RunAndReturn(run func(...nats.JSOpt) (nats.JetStreamContext, error)) *MockJetStreamer_JetStream_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockJetStreamer creates a new instance of MockJetStreamer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJetStreamer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJetStreamer {
	mock := &MockJetStreamer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
