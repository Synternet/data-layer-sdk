// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestServiceClient is the client API for TestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestServiceClient interface {
	// Test Testing single request and reply
	Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
	// TestStream Testing request and streaming reply
	TestStream(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (TestService_TestStreamClient, error)
	// TestStream Testing only streaming
	TestStreamOnly(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (TestService_TestStreamOnlyClient, error)
	// TestStreamBidirectional Testing streaming both ways
	TestStreamBidirectional(ctx context.Context, opts ...grpc.CallOption) (TestService_TestStreamBidirectionalClient, error)
}

type testServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestServiceClient(cc grpc.ClientConnInterface) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, "/types.rpc.TestService/Test", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) TestStream(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (TestService_TestStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestService_ServiceDesc.Streams[0], "/types.rpc.TestService/TestStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceTestStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestService_TestStreamClient interface {
	Recv() (*TestResponse, error)
	grpc.ClientStream
}

type testServiceTestStreamClient struct {
	grpc.ClientStream
}

func (x *testServiceTestStreamClient) Recv() (*TestResponse, error) {
	m := new(TestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) TestStreamOnly(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (TestService_TestStreamOnlyClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestService_ServiceDesc.Streams[1], "/types.rpc.TestService/TestStreamOnly", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceTestStreamOnlyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestService_TestStreamOnlyClient interface {
	Recv() (*TestResponse, error)
	grpc.ClientStream
}

type testServiceTestStreamOnlyClient struct {
	grpc.ClientStream
}

func (x *testServiceTestStreamOnlyClient) Recv() (*TestResponse, error) {
	m := new(TestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) TestStreamBidirectional(ctx context.Context, opts ...grpc.CallOption) (TestService_TestStreamBidirectionalClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestService_ServiceDesc.Streams[2], "/types.rpc.TestService/TestStreamBidirectional", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceTestStreamBidirectionalClient{stream}
	return x, nil
}

type TestService_TestStreamBidirectionalClient interface {
	Send(*TestRequest) error
	Recv() (*TestResponse, error)
	grpc.ClientStream
}

type testServiceTestStreamBidirectionalClient struct {
	grpc.ClientStream
}

func (x *testServiceTestStreamBidirectionalClient) Send(m *TestRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testServiceTestStreamBidirectionalClient) Recv() (*TestResponse, error) {
	m := new(TestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestServiceServer is the server API for TestService service.
// All implementations should embed UnimplementedTestServiceServer
// for forward compatibility
type TestServiceServer interface {
	// Test Testing single request and reply
	Test(context.Context, *TestRequest) (*TestResponse, error)
	// TestStream Testing request and streaming reply
	TestStream(*TestRequest, TestService_TestStreamServer) error
	// TestStream Testing only streaming
	TestStreamOnly(*emptypb.Empty, TestService_TestStreamOnlyServer) error
	// TestStreamBidirectional Testing streaming both ways
	TestStreamBidirectional(TestService_TestStreamBidirectionalServer) error
}

// UnimplementedTestServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTestServiceServer struct {
}

func (UnimplementedTestServiceServer) Test(context.Context, *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedTestServiceServer) TestStream(*TestRequest, TestService_TestStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method TestStream not implemented")
}
func (UnimplementedTestServiceServer) TestStreamOnly(*emptypb.Empty, TestService_TestStreamOnlyServer) error {
	return status.Errorf(codes.Unimplemented, "method TestStreamOnly not implemented")
}
func (UnimplementedTestServiceServer) TestStreamBidirectional(TestService_TestStreamBidirectionalServer) error {
	return status.Errorf(codes.Unimplemented, "method TestStreamBidirectional not implemented")
}

// UnsafeTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestServiceServer will
// result in compilation errors.
type UnsafeTestServiceServer interface {
	mustEmbedUnimplementedTestServiceServer()
}

func RegisterTestServiceServer(s grpc.ServiceRegistrar, srv TestServiceServer) {
	s.RegisterService(&TestService_ServiceDesc, srv)
}

func _TestService_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.rpc.TestService/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).Test(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_TestStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TestRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServiceServer).TestStream(m, &testServiceTestStreamServer{stream})
}

type TestService_TestStreamServer interface {
	Send(*TestResponse) error
	grpc.ServerStream
}

type testServiceTestStreamServer struct {
	grpc.ServerStream
}

func (x *testServiceTestStreamServer) Send(m *TestResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TestService_TestStreamOnly_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServiceServer).TestStreamOnly(m, &testServiceTestStreamOnlyServer{stream})
}

type TestService_TestStreamOnlyServer interface {
	Send(*TestResponse) error
	grpc.ServerStream
}

type testServiceTestStreamOnlyServer struct {
	grpc.ServerStream
}

func (x *testServiceTestStreamOnlyServer) Send(m *TestResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TestService_TestStreamBidirectional_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServiceServer).TestStreamBidirectional(&testServiceTestStreamBidirectionalServer{stream})
}

type TestService_TestStreamBidirectionalServer interface {
	Send(*TestResponse) error
	Recv() (*TestRequest, error)
	grpc.ServerStream
}

type testServiceTestStreamBidirectionalServer struct {
	grpc.ServerStream
}

func (x *testServiceTestStreamBidirectionalServer) Send(m *TestResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testServiceTestStreamBidirectionalServer) Recv() (*TestRequest, error) {
	m := new(TestRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestService_ServiceDesc is the grpc.ServiceDesc for TestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "types.rpc.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _TestService_Test_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TestStream",
			Handler:       _TestService_TestStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TestStreamOnly",
			Handler:       _TestService_TestStreamOnly_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TestStreamBidirectional",
			Handler:       _TestService_TestStreamBidirectional_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "types/rpc/test_service.proto",
}
