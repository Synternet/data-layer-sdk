// Code generated by mockery v2.42.3. DO NOT EDIT.

package telemetry

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockPingServiceClient is an autogenerated mock type for the PingServiceClient type
type MockPingServiceClient struct {
	mock.Mock
}

type MockPingServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPingServiceClient) EXPECT() *MockPingServiceClient_Expecter {
	return &MockPingServiceClient_Expecter{mock: &_m.Mock}
}

// PingPong provides a mock function with given fields: ctx, in, opts
func (_m *MockPingServiceClient) PingPong(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PingPong")
	}

	var r0 *Pong
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *Ping, ...grpc.CallOption) (*Pong, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *Ping, ...grpc.CallOption) *Pong); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Pong)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *Ping, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPingServiceClient_PingPong_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PingPong'
type MockPingServiceClient_PingPong_Call struct {
	*mock.Call
}

// PingPong is a helper method to define mock.On call
//   - ctx context.Context
//   - in *Ping
//   - opts ...grpc.CallOption
func (_e *MockPingServiceClient_Expecter) PingPong(ctx interface{}, in interface{}, opts ...interface{}) *MockPingServiceClient_PingPong_Call {
	return &MockPingServiceClient_PingPong_Call{Call: _e.mock.On("PingPong",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockPingServiceClient_PingPong_Call) Run(run func(ctx context.Context, in *Ping, opts ...grpc.CallOption)) *MockPingServiceClient_PingPong_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*Ping), variadicArgs...)
	})
	return _c
}

func (_c *MockPingServiceClient_PingPong_Call) Return(_a0 *Pong, _a1 error) *MockPingServiceClient_PingPong_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPingServiceClient_PingPong_Call) RunAndReturn(run func(context.Context, *Ping, ...grpc.CallOption) (*Pong, error)) *MockPingServiceClient_PingPong_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPingServiceClient creates a new instance of MockPingServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPingServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPingServiceClient {
	mock := &MockPingServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
